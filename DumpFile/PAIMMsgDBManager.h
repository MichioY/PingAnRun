//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@interface PAIMMsgDBManager : NSObject
{
}

+ (id)shortPathToFull:(id)arg1;
+ (id)fullPathToShort:(id)arg1;
+ (id)fetchGlobalSettingByJID:(id)arg1;
+ (_Bool)updateGlobalSettingTableField:(id)arg1 withValue:(id)arg2 byJID:(id)arg3;
+ (_Bool)saveGlobalSetting:(id)arg1;
+ (id)getChatSettingbyConversationID:(id)arg1;
+ (_Bool)updateChatBackgroundImg:(id)arg1 byConversationID:(id)arg2;
+ (_Bool)updateChatSettingField:(id)arg1 withValue:(id)arg2 byConversationID:(id)arg3;
+ (_Bool)updateChatSetting:(id)arg1 withNotify:(_Bool)arg2;
+ (_Bool)updateChatSetting:(id)arg1;
+ (id)searchChatRecordByString:(id)arg1 andConversationID:(id)arg2;
+ (id)deleteAndfetchChatRecordsByConversationId:(id)arg1 fetchCount:(unsigned long long)arg2 groupChat:(id)arg3;
+ (long long)getConversationBadge:(id)arg1;
+ (id)fetchLastMessageByConversation:(id)arg1;
+ (id)fetchfetchChatRecordsByConversationId:(id)arg1 beforeTenAndAfterMessage:(id)arg2;
+ (id)fetchfetchChatRecordsByConversationId:(id)arg1 beforeDate:(id)arg2 count:(unsigned long long)arg3;
+ (_Bool)updateMessageRetryCountAndState:(unsigned long long)arg1 retryCount:(long long)arg2 andMessageID:(id)arg3 conversationID:(id)arg4;
+ (_Bool)updateMessageRetryCount:(id)arg1;
+ (_Bool)updateMessageHeight:(id)arg1;
+ (_Bool)updateMessageRead:(id)arg1;
+ (_Bool)updateVoiceMessageRead:(id)arg1;
+ (_Bool)updateMessageState:(unsigned long long)arg1 andMessageID:(id)arg2 conversationID:(id)arg3;
+ (_Bool)setSendingMessageFailed:(id)arg1;
+ (_Bool)updateMessageDownloadKey:(id)arg1 andMessageID:(id)arg2 conversationID:(id)arg3;
+ (_Bool)updateDownloadMessage:(id)arg1;
+ (_Bool)updateMessageThumbnailPic:(id)arg1 andMessageID:(id)arg2 conversationID:(id)arg3;
+ (_Bool)updateMessageContent:(id)arg1 andMessageID:(id)arg2 conversationID:(id)arg3;
+ (long long)getChatRecordCountByConversationId:(id)arg1;
+ (id)fetchChatRecordsByConversationId:(id)arg1;
+ (id)fetchMessageWithConversationId:(id)arg1 andMsgID:(id)arg2;
+ (_Bool)fetchChatByConversationId:(id)arg1 andMsgID:(id)arg2;
+ (id)fetchChatRecordByConversationId:(id)arg1 andMsgID:(id)arg2;
+ (_Bool)deleteAllConversation;
+ (_Bool)deleteAllMessage:(id)arg1;
+ (_Bool)deleteMessage:(id)arg1 InConversation:(id)arg2 messageType:(unsigned long long)arg3 content:(id)arg4;
+ (_Bool)insertChatSettingWithMessage:(id)arg1 database:(id)arg2;
+ (_Bool)updateChatSettingStickieTime:(id)arg1 stickieTime:(id)arg2 database:(id)arg3;
+ (_Bool)isExistChatSetting:(id)arg1 database:(id)arg2;
+ (_Bool)insertConversationWithMessage:(id)arg1 database:(id)arg2;
+ (_Bool)updateConversationWithconversationId:(id)arg1 Message:(id)arg2 unreadTotal:(long long)arg3 database:(id)arg4;
+ (long long)getUnreadMessageTotalWithConversationId:(id)arg1 database:(id)arg2;
+ (_Bool)isExistConversation:(id)arg1 database:(id)arg2;
+ (_Bool)isExistConversation:(id)arg1;
+ (_Bool)saveMessageToDatabase:(id)arg1 tableName:(id)arg2 database:(id)arg3;
+ (_Bool)isExistChatRecord:(id)arg1 database:(id)arg2;
+ (_Bool)createChatRecordTableWithConversationID:(id)arg1 database:(id)arg2;
+ (_Bool)saveConversationAndSetting:(id)arg1 database:(id)arg2;
+ (_Bool)saveConversationAndSetting:(id)arg1;
+ (_Bool)onlySaveMessage:(id)arg1 database:(id)arg2;
+ (_Bool)onlySaveMessage:(id)arg1;
+ (_Bool)saveMessage:(id)arg1 database:(id)arg2;
+ (_Bool)saveMessage:(id)arg1;
+ (_Bool)ClearFocusByOtherPeopleFlag:(id)arg1;
+ (_Bool)saveGroupOfflineMessages:(id)arg1;
+ (_Bool)saveOfflineMessages:(id)arg1;
+ (id)createBlackListMessageWithID:(id)arg1 andFrom:(id)arg2 conversationID:(id)arg3;
+ (id)sqliteEscape:(id)arg1;
+ (_Bool)deleteConversation:(id)arg1;
+ (void)clearBadgeNumberWithConversionId:(id)arg1;
+ (unsigned long long)getBadgeNumber;
+ (id)fetchConverationRecords;
+ (id)fetchConversationByID:(id)arg1;
+ (_Bool)saveDraft:(id)arg1 byConversationID:(id)arg2 andMsgTo:(id)arg3 msgType:(unsigned long long)arg4;
+ (_Bool)setChatTableHeightZero:(id)arg1;
+ (_Bool)setMessageAllReadByConversationID:(id)arg1;
+ (unsigned long long)fetchChatTypeInConversation:(id)arg1;

@end

